- 1 số khái niệm cơ bản về MySQL
    - Đầu tiên là về thêm sửa xóa table
        +. Thêm :
            CREATE TABLE tenTable (
                // Các field của table
            )

            VD: Tạo bảng nhân viên gồm tên, tuổi 
            CREATE TABLE NhanVien (
                id int primary key
                name varchar(255)
                age int 
            )

        +. Sửa 
            UPDATE TABLE (
                SET column = value
                WHERE [condition]
            )

            VD: Update lại tên nhân viên có id = 3 -> Vu
            UPDATE NhanVien (
                SET name = 'Vu'
                WHERE id = 3
            )

        +. Xóa 
            - Cần lưu ý : Drop thì sẽ xóa cả bảng còn truncate thì chỉ xóa dữ liệu của bảng còn bảng thì vẫn dữ nguyên 
            DROP TABLE tenTable

            VD: Xóa bảng nhân viên
            DROP table NhanVien

    - Khóa chính và khóa ngoại 
        - Khóa chính: 
            +. Unique : Là duy nhất. Trường nào có từ khóa unique thì không thể có 2 giá trị trùng nhau 
            +. Not null: Không cho phép null
            +. Constraint: Đặt tên cho khóa chính //TODO: bo sung vd
            +. Trong 1 table có thể đặt nhiều khóa chính 
                VD: 
                    CREATE TABLE NhanVien(
                        id1 int NOTNULL -- Lưu ý là không được đặt là primary
                        id2 int NOTNULL 

                        name varchar(255)

                        primary key(id1, id2) 
                    )

        - Khóa ngoại: 
            - Tham chiếu tới khóa chính 
            - Cùng kiểu dữ liệu 

            - Tạo khóa ngoại trong khi tạo bảng
                CREATE TABLE BoMon (
                    id int not null
                    name varchar(255)
                )

                CREATE TABLE GiaoVien (
                    id int not null
                    bomon_id int
                    name varchar(255)

                FOREIGN KEY (bomon_id) REFERENCES BoMon(id)
                )

    - Truy vấn với điều kiện
        - Count : dùng để đếm số lượng record 
            +. COUNT(*): Đếm số lượng all record 
            +. COUNT (Tên trường): Đếm số lượng tên trường đó 

            VD: Đếm all số lượng record trong bảng NhanVien
                SELECT COUNT(*) FROM NhanVien  
        
    - Tìm kiếm gần đúng với like 
        - Tìm kiếm nhân viên bắt đầu bằng chữ v
            SELECT * FROM NhanVien
            WHERE name like 'v%'

            +. v%: Bắt đầu bằng chữ v
            +. %v: Kết thúc bằng chữ v
            +. %v%: Có chữ v

    
    - Các khái niệm về join cần nắm kĩ 
    - Inner join
        - Kết hợp 2 bảng lại lấy ra các trường thỏa mãn điều kiện 
        SELECT * FROM 
            GiaoVien join BoMon
            ON BoMon.id = GiaoVien.bomon_id

    - Cross join 
        - Là tổ hợp mỗi record của bảng A với all record ở bảng B

    - Left join: 
        - Bảng bên phải sẽ gom vào bảng bên trái 
        - Record ở bảng bên phải không có thì để null 
        - Record ở bảng bên trái không có thì không điền vào
    - Right join: 
        - Ngược lại với left join

    - Union: 
        - Gom 2 hoăc nhiều bảng lại & trả về 1 danh sách
        - Số lượng trong các lệnh select phải bằng nhau
        - Mỗi column tương ứng vị trí phải có cùng kiểu dữ liệu và độ dài
        - Mặc định thì UNION sẽ loại bỏ trùng lặp nên ta có 2 option : 
            +. UNION DISTINCT -> Loại bỏ kết quả trùng (Mặc định UNION sẽ là DISTINCT)
            +. UNION ALL -> Giữ lại kết quả trùng

            VD: Lấy ra all id, name của 2 bảng GiaoVien và BoMon 

                SELECT id, name FROM GiaoVien
                UNION
                SELECT id, name FROM BoMon
    

    - Tạo bảng mới từ dữ liệu có sẵn (Thường dùng để backup)
            VD: Lấy tất cả dữ liệu của bảng GiaoVien đưa vào bảng Vu

                CREATE TABLE Vu1 SELECT * FROM GiaoVien;

    - SELECT 
        - Lấy tất cả thông tin của 1 bảng dùng SELECT tenBang.*

        - Truy vấn lồng 
            - SELECT * FROM 
              GiaoVien, (SELECT * FROM DeTai) AS DT

    - Group by: 
        - Gom nhóm dữ liệu và chỉ trả về 1 record cho mỗi nhóm

        VD: Trả về danh sách tên các giao viên mà không bị trùng tên nhau 

        SELECT name FROM GiaoVien
        group by name 

        - Một số hàm hay dùng 
            - Agreeate Function
            - AVG(): Tính trung bình 
            - FIRST(): Phần tử đầu tiên
            - LAST(): Phần tử cuối cùng 
            - MAX(): Là phần tử lớn nhất theo số 
            - MIN(): Là phần tử nhỏ nhất theo số 
            - ROUND(): Làm tròn
            - SUM(): Tổng 

        - String function 
            - CHARINDEX: Tìm 1 phần tử có tồn tại trong chuỗi không 
            - CONCAT(): Cắt chuỗi 
            - LEFT(): Lấy bên trái bao nhiêu phần tử
            - LEN/LENGTH(): Độ dài 
            - LTRIM(): Cắt khoảng trắng bên trái
            - RTRIM(): Cắt khoảng trắng bên phải
            - SUBSTRING(): Lấy ra chuỗi con

        - Having giống như where của select nhưng dùng cho group by

    - View //TODO: View khac gi voi table, khi nao dung view khi nao dung table
        - Là 1 bảng ảo 
        - Tạo view 
            CREATE VIEW testView as  -- Dữ liệu bên trong bảng view sẽ giống bảng giáo viên 
            SELECT * FROM GiaoVien
        - Khi thay đổi giá tri bất kì ở cột nào ở bảng GiaoVien thì bảng testView cũng thay đổi theo 

    - Check 
        - Khi muốn check dữ liệu chỉ được nằm trong khoảng điều kiện mong muốn
        VD:Lương chỉ được nằm khoảng > 2000 & < 5000

        CREATE TABLE TestCheck (
            Id int 
            Luong int CHECK(Luong > 2000 AND LUONG < 5000)
        )

    - DECLARE và biến
        - DECLARE : Là từ khóa để tạo biến 
        - Có thể đặt DEFAULT là giá trị mặc định cho biến 
        VD : 
            DECLARE title varchar(255) (DEFAULT 'No Name')

        - Gán giá trị cho biến thì sử dụng SET
            VD: Tạo biến age & gán giá trị 20 

                DECLARE age int 
                SET age = 20

        - qua câu lệnh SELECT
            DECLARE total_products int

            SELECT COUNT(*) INTO total_products
            FROM products
            
            -- Thực hiện truy vấn sql đếm tổng record và gán vào biến total_products

        - Phạm vi của biến
            +. Nếu khai báo bên trong PROCEDURE (Giữa begin và end) thì gọi là biến cục bộ của PROCEDURE
            VD: 
                
                DELIMITER $$
                DROP PROCEDURE IF EXISTS tinhTong $$
                CREATE PROCEDURE tinhTong()
                BEGIN
                    DECLARE a INT (11) DEFAULT 0;
                    DECLARE b INT (11) DEFAULT 0;
                    DECLARE tong INT (11) DEFAULT 0;
                    
                    SET a = 200;
                    SET b = 300;
                    SET tong = a + b;
                    
                    SELECT tong;
                    
                END; $$
                DELIMITER;

            +. Còn nếu khai báo bên ngoài PROCEDURE thì nó sẽ không hiểu biến đấy (K phải khai báo bên ngoài là nó hiểu là biến toàn cục)
        

    - STORE PROCEDURE
        - Tái sử dụng lại code 
        - Tạo bản sao để lần sau k cần chạy lại từ đầu 
        - Giới hạn được quyền sử dụng của các user 

        VD: 
            CREATE PROC StoreTest -- Có thể viết là PROCEDURE
                @MaGv int 
            AS 
            BEGIN 
                SELECT * FROM GiaoVien WHERE MaGv = @MaGv 
            END

            -- Sử dụng 
            EXEC StoreTest @MaGv = 3

    
    - Trigger 
        - Là 1 đối tượng định danh trong CSDL, tự động thực thi khi xảy ra sự kiện trên 1 bảng
        - Các sự kiện bao gồm INSERT, UPDATE hay DELETE
        - 1 số giới hạn khi sử dụng trigger: 
            - Không thể tạo trigger để theo dõi bảng ảo hay bảng tạm 
            - Không sử dụng được TRANSACTION trong trigger
            - Không cho phép sử dụng return
            - Không được trùng tên
